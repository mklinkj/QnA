plugins {
  id "io.freefair.lombok" version "${lombokPluginVersion}"
  id 'war'
  id "org.gretty" version "${grettyVersion}"
  id "io.spring.dependency-management" version "${springDependencyManagementPluginVersion}"
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of("${javaVersion}")
  }
}

[compileJava, compileTestJava]*.options*.encoding = "${projectEncoding}"

repositories {
  maven { url 'https://repo.spring.io/snapshot' }
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework:spring-framework-bom:${springVersion}"
    mavenBom "org.springframework.security:spring-security-bom:${springSecurityVersion}"
  }
  dependencies {
    dependency "jakarta.servlet:jakarta.servlet-api:${jakartaServletApiVersion}"
  }
}


dependencies {
  implementation "org.springframework:spring-context"
  implementation "org.springframework:spring-webmvc"

  implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
  implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"

  implementation "org.springframework.security:spring-security-config"
  implementation "org.springframework.security:spring-security-web"

  implementation "jakarta.annotation:jakarta.annotation-api:${jakartaAnnotationApiVersion}"
  compileOnly "jakarta.servlet:jakarta.servlet-api"

  implementation "org.thymeleaf:thymeleaf-spring6:${thymeleafSpringVersion}"
  implementation "org.thymeleaf.extras:thymeleaf-extras-java8time:${thymeleafExtrasJava8timeVersion}"
  implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6:${thymeleafSpringVersion}"

  implementation "org.webjars:webjars-locator:${webjarsLocatorVersion}"
  implementation "org.webjars:bootstrap:${bootstrapVersion}"
  implementation "org.webjars:Semantic-UI:${semanticUiVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testImplementation "org.assertj:assertj-core:${assertJVersion}"

  testImplementation "org.springframework:spring-test"
  testImplementation "jakarta.servlet:jakarta.servlet-api"
  testImplementation "org.springframework.security:spring-security-test"
  testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    outputs.upToDateWhen { false }
    showStandardStreams = true
  }
}

gretty {
  httpPort = 8080
  contextPath = "/"
  servletContainer = "tomcat10"
  tomcat10ServletApiVersion = "${jakartaServletApiVersion}"
  jvmArgs = [
      "-Djava.security.egd=file:/dev/./urandom",
      "--add-opens=java.base/java.io=ALL-UNNAMED",
      "--add-opens=java.base/java.lang=ALL-UNNAMED",
      "--add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED"
  ]
  integrationTestTask = "integrationTest"
}

afterEvaluate {
  appBeforeIntegrationTest {
    httpPort = getRandomFreePort()
  }
}

tasks.named('test') {
  useJUnitPlatform {
    excludeTags 'integration'
  }
}

tasks.register('integrationTest', Test) {
  useJUnitPlatform {
    includeTags 'integration'
  }
  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = sourceSets.test.runtimeClasspath
}